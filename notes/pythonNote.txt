笔记：
1.========CentOS7下安装Scrapy===========
更新yum
[root@localhost ~]# yum -y update

安装gcc及扩展包
[root@localhost ~]# yum install gcc libffi-devel python-devel openssl-devel

安装开发工具包
[root@localhost ~]# yum groupinstall -y development

安装libxslt-devel支持lxml
[root@localhost ~]# yum install libxslt-devel

安装pip
[root@localhost ~]# yum -y install python-pip

安装Scrapy
[root@localhost ~]# pip install scrapy

2.===========Python 头部 #!/usr/bin/python 和 #!/usr/bin/env 的区别============

大部分python文件的头部都会写上 #!/usr/bin/python 或者 #!/usr/bin/env ，这个语句主要和运行模式有关，

如果我们用普通运行模式例如(linux) ： python *.py 那么这个语句在此运行模式下无效。如果想让python程序像普通程序一样运行，例如：./*.py (文件要有可执行权限chmod a+x *.py)，这个语句就起作用了，他用来为脚本语言指定解释器，通常认为用 #!/usr/bin/env python 要比 #!/usr/bin/python 更好，因为 python 解释器有时并不安装在默认路径，例如在虚拟环境中。

解释：

----	#!/usr/bin/env python    ----

这种写法在你机器上安装了多个版本的python的时候有意义，这样声明的时候，会去取你机器的 PATH 中指定的第一个 python 来执行你的脚本。如果这时候你又配置了虚拟环境的话，那么这样写可以保证脚本会使用你虚拟环境中的 python 来执行。

	#!/usr/bin/python

表示写死了就是要 /usr/bin/python 这个目录下 python 来执行你的脚本。这样写程序的可移植性就差了，如果此路径下python命令不存在就会报错

3.========Python的编码注释# -*- coding:utf-8 -*-=========

如果要在python2的py文件里面写中文，则必须要添加一行声明文件编码的注释，否则python2会默认使用ASCII编码。

	# -*- coding:utf-8 -*- 

4.=====结束 ibus 守护进程（解决pycharm无法输入中文） =====
	sudo pkill ibus-daemon

5.=====twisted 版本========

6.====tb_Begin.py========
	tb_Begin.py与scrapy.cfg 同级

	from scrapy import cmdline

	cmdline.execute("scrapy crawl tb".split())

7.======django========
    http://wiki.jikexueyuan.com/project/django-set-up-blog/introduction.html

	安装django:
	pip install django==1.8

	查看版本
	django-admin --version

	新建django项目：
	先进入需要生成项目的文件夹
	django-admin.py startproject myfirstDjango

	创建一个应用
	cd	myfirstDjango
	python manage.py startapp first_app

	同步数据库

	python manage.py makemigrations  
	python manage.py migrate

	如果重新同步需要删除app下0001_initial.py格式的文件

	创建超级用户：

    python manage.py createsuperuser
	
	启动开发服务器

	python manage.py runserver 0.0.0.0:9000  	
	
	http://127.0.0.1:8000/


	models:

        字段类型：
        AutoField：一个自动递增的整型字段，添加记录时它会自动增长。你通常不需要直接使用这个字段；如果你不指定主键的话，系统会自动添加一个主键字段到你的model。(参阅自动主键字段)
        IntegerField：用于保存一个整数。
        CharField 用于存储字符串, max_length设置最大长度
        TextField 用于存储大量文本
        DateTimeField 用于存储时间, auto_now_add设置True表示自动设置对象增加时间



8.=====webpy=====
	进入解压后的目录
	python setup.py install 

	启动服务器： python helloWorld.py 192.168.2.122:8000

9.=====防火墙=====
CentOS 7.0默认使用的是firewall作为防火墙

	1、直接关闭防火墙

	systemctl stop firewalld.service  

	2、禁止firewall开机启动

	systemctl disable firewalld.service 

	3、firewalld的基本使用
	启动： systemctl start firewalld
	查看状态： systemctl status firewalld  |  firewall-cmd --state
	停止： systemctl disable firewalld
	禁用： systemctl stop firewalld

10.=====端口号=====
	 tcp        0      0 0.0.0.0:5000            0.0.0.0:*               LISTEN      7094/		python2.7 


	检查端口被哪个进程占用
	netstat -lnp|grep 5000

	查看进程的详细信息
	ps 7094

	杀掉进程
	kill 7094    | 强制杀死 kill -9 7094

11.======查看ip地址======
	ifconfig -a

12.=======virtualenv======
    1.安装virtualenv
      sudo easyinstall virtualenv 或者 sudo pip install virtualenv

    2.virtualenv venv
       virtualenv安装成功后，就可以创建自己的虚拟环境了。
       virtualenv myenv

    3.激活虚拟环境
       source webenv/bin/activate


        安装virtualenv：
        pip install virtualenv
    创建虚拟环境
        virtualenv venv
        venv是新创建的虚拟环境的名称。 同时会创建一个与虚拟环境名称相同的文件夹venv, 里面存储了一个独立的Python执行环境。
    进入虚拟环境
        source venv/bin/activate
        进入虚拟环境后，命令行的提示符会加入虚拟环境的名称，例如：(venv)user@machine:~$
    退出虚拟环境$
        deactivate
    删除虚拟环境
        rm -r venv
        直接删除虚拟环境所在的文件夹venv就删除了我们创建的venv虚拟环境。

13.===========修改文件夹权限=======
    修改文件夹所属组 ：chown csc webenv/

14.===============CentOS查看树形目录命令tree的安装==============
    yum install tree

15.=============pycharm===========
    try catch :
    ctrl+alt+t

16.===============python正则表达式===========
    http://www.runoob.com/python/python-reg-expressions.html


    正则表达式修饰符 - 可选标志
    正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。多个标志可以通过按位 OR(|) 它们来指定。如 re.I | re.M 被设置成 I 和 M 标志：

    修饰符	描述
    re.I	使匹配对大小写不敏感
    re.L	做本地化识别（locale-aware）匹配
    re.M	多行匹配，影响 ^ 和 $
    re.S	使 . 匹配包括换行在内的所有字符
    re.U	根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.
    re.X	该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。


    由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示它们。模式元素(如 r'\t'，等价于 '\\t')匹配相应的特殊字符。

17.==============css=================
    http://www.runoob.com/css/css-tutorial.html


18.===================Django 部署(Nginx)======================
    lsof -i :8002

    https://www.cnblogs.com/chenice/p/6921727.html

    安装 nginx

    sudo yum install epel-release
    sudo yum install python-devel nginx

    安装 supervisor, 一个专门用来管理进程的工具，我们用它来管理 uwsgi 进程

    (yum install python-setuptools)
    easy_install supervisor

    配置Supervisor

        a.创建文件夹和配置文件

        mkdir /etc/supervisor
        echo_supervisord_conf > /etc/supervisor/supervisord.conf

        启动Supervisor服务

        supervisord -c /etc/supervisor/supervisord.conf

        创建/etc/supervisor/config.d目录，用于存放进程管理的配置文件
        mkdir /etc/supervisor/config.d

        创建项目配置文件 myfirstDjango.conf


        [program:myfirstDjango]
        command=/home/data/uwsgi --http :9005 --chdir /home/data/myfirstDjango --module myfirstDjango.wsgi --home=/home/webenvs
        directory=/home/data/myfirstDjango
        startsecs=0
        stopwaitsecs=0
        autostart=true
        autorestart=true


        启动 supervisorcd /

        (sudo) supervisord -c /etc/supervisord.conf
        重启 zqxt 程序（项目）：

        (sudo) supervisorctl -c /etc/supervisord.conf restart zqxt
        启动，停止，或重启 supervisor 管理的某个程序 或 所有程序：

        (sudo) supervisorctl -c /etc/supervisord.conf [start|stop|restart] [program-name|all]


    重启nginx
        whereis nginx
        /usr/sbin/nginx -s reload


    使用 uwsgi 来部署
        安装 uwsgi

        pip install uwsgi

        使用 uwsgi 运行项目

        uwsgi --http :9005 --chdir /home/data/myfirstDjango --home=/home/webenvs --module myfirstDjango.wsgi


        uwsgi --http 192.168.43.128:8080 --file /home/csc/桌面/project_pys/dataMag/dataMag/wsgi.py --static-map=/static=static --home=/home/webenv/

        uwsgi --ini /home/csc/桌面/project_pys/script/uwsgi.ini

    lsof -i :8000
    kill -9 pid

    uwsgi ini_.ini



  wsgi.py

    import os,sys

    # from django.core.wsgi import get_wsgi_application

    sys.path.append('/data/webenv/lib/python2.7/site-packages')
    sys.path.append('/data/webenv/lib64/python2.7/site-packages')
    from django.core.wsgi import get_wsgi_application

    path = '/data/dataMag'  # use your own username here
    if path not in sys.path:
        sys.path.append(path)

    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "dataMag.settings")

    application = get_wsgi_application()


19.====================nohub===================
    nohup python /data/spider_crontab/spiderPackage/tt.py > /data/spider_crontab/spiderPackage/log/tt/`date +%Y%m%d`.log 2>&1


    查看运行的后台进程
    jobs -l

    终止后台运行的进程

    kill -9  进程号

20====================jdango反向生成models=============
    Django引入外部数据库还是比较方便的，步骤如下
    创建一个项目，修改seting文件，在setting里面设置你要连接的数据库类型和连接名称，地址之类，和创建新项目的时候一致
    运行下面代码可以自动生成models模型文件
    python manage.py inspectdb
    这样就可以在命令行看到数据库的模型文件了

    把模型文件导入到app中
    创建一个app
    django-admin.py startapp app
    python manage.py inspectdb > app/models.py
    ok模型文件已经生成好了。下面的工作就和之前一样了

21===================解决Python 2.7.x 使用Requests发起https请求时报Warning的问题 ==================
    先来看下具体的Warning是啥样的

    /usr/local/lib/python2.7/dist-packages/requests/packages/urllib3/connectionpool.py:852: InsecureRequestWarning: Unverified HTTPS request

    解决方法：
    添加下面代码
    from requests.packages.urllib3.exceptions import InsecureRequestWarning
    # 禁用安全请求警告
    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

22.=====================代码中运行cmd命令方式===================
    import os

    if __name__ == '__main__':
        os.system('python manage.py runserver 0.0.0.0:9000')
        pass

23.
    http://blog.csdn.net/u012643122/article/details/52751073

    https://www.cnblogs.com/liuq/p/5946803.html

    https://www.cnblogs.com/yangmv/p/5327477.html  django 增删改查

    Q对象(django.db.models.Q)可以对关键字参数进行封装，从而更好地应用多个查询。可以组合使用 &（and）,|（or），~（not）操作符，当一个操作符是用于两个Q的对象,它产生一个新的Q对象。

    data = serializers.serialize("json", relist, ensure_ascii=False)

    return HttpResponse(data,content_type="application/json")


24.===================使用PyCharm进行远程开发和调试======================

    http://blog.csdn.net/ll641058431/article/details/53049453


25.==================queryset=============
    queryset转成list
    entry_list = list(Entry.objects.all())

26.===========Django models通过DateTimeField保存到MySQL的时间的时区问题=================

    http://blog.csdn.net/win_turn/article/details/53000770

    TIME_ZONE = 'Asia/Shanghai'
    USE_TZ = False

27.==================获取当前时间==========
    create_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')


+ static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

28.==================scikit-learn封装了大部分机器学习算法的Python库=================
    scikit-learn封装了大部分机器学习算法的Python库。通常ML都在调用现有算法库，然后调参数

    https://www.jianshu.com/p/516f009c0875

29.=================centos7 五大查找常用命令=================
    centos7 五大查找常用命令

    find / -name 'nginx.conf'

    fuser -k 80/tcp

server { # 这个server标识我要配置了
listen 80; # 我要监听那个端口
server_name 192.168.43.128 ; # 你访问的路径前面的url名称
access_log /var/log/nginx/access.log main; # Nginx日志配置
charset utf-8; # Nginx编码
gzip_types text/plain application/x-javascript text/css text/javascript application/x-httpd-php application/json text/json image/jpeg image/gif image/png application/octet-stream; # 支持压缩的类型

error_page 404 /404.html; # 错误页面
error_page 500 502 503 504 /50x.html; # 错误页面

# 指定项目路径uwsgi
location / { # 这个location就和咱们Django的url(r'^admin/', admin.site.urls),
proxy_buffer_size 64k;
proxy_buffers   32 32k;
proxy_busy_buffers_size 128k;
include uwsgi_params; # 导入一个Nginx模块他是用来和uWSGI进行通讯的
uwsgi_connect_timeout 60; # 设置连接uWSGI超时时间
uwsgi_pass unix:/home/csc/桌面/project_pys/script/uwsgi.sock; # 指定uwsgi的sock文件所有动态请求就会直接丢给他
}

# 指定静态文件路径
location /static/ {
alias /home/csc/桌面/project_pys/dataMag/static/;
index index.html index.htm;
}

}



30.================CentOS7安装tkinter===============
    使用matplotlib模块时会用到

    sudo yum install python-tools

31.============python 编码问题：'ascii' codec can't encode characters in position 的解决方案=========
    http://blog.csdn.net/olanlanxiari/article/details/48201231

    import sys
    reload(sys)
    sys.setdefaultencoding('utf8')


     另一个方案是在python的Lib\site-packages文件夹下新建一个sitecustomize.py，内容为：

    Python代码
    # encoding=utf8
    import sys

    reload(sys)
    sys.setdefaultencoding('utf8')

32.================mysql怎么将一张表部分数据导出为csv=================
    SELECT
        *
    FROM
        itemsearch_cats
    WHERE
        parent_cid = '23'
    INTO OUTFILE 'E:/demo/test.csv'

     FIELDS TERMINATED BY ','
     OPTIONALLY ENCLOSED BY '"'
     LINES TERMINATED BY '\n';

33.================Linux(CentOS7.1)修改默认yum源为国内的阿里云yum源==================
    https://www.cnblogs.com/comexchan/p/5815869.html

    官方的yum源在国内访问效果不佳。

    需要改为国内比较好的阿里云或者网易的yum源

    修改方式：

    下载wget

    yum install wget -y

    echo 备份当前的yum源

    mv /etc/yum.repos.d /etc/yum.repos.d.backup4comex

    echo 新建空的yum源设置目录

    mkdir /etc/yum.repos.d

    echo 下载阿里云的yum源配置

    wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo


    然后重建缓存：

    yum clean all
    yum makecache


34.================安装python3.5.1==================
    CentOs7 环境

    首先安装epel扩展源：
    　　yum -y install epel-release
    　　更新完成之后，就可安装pip：
    　　yum -y install python-pip
    　　安装完成之后清除cache：
    　　yum clean all
    这是在root用户时使用的命令，当前用户如果不具有root权限，加上sudo。
     
    如果pip install 出现问题可以试试命令
    pip install setuptools==33.1.1

    yum install python-pip
    pip list

    yum -y install automake libtool flex bison pkgconfig gcc-c++ boost-devel libevent-devel zlib-devel Python-devel ruby-devel crypto-utils aopenssl openssl-devel
    yum -y install gcc libffi-devel python-devel openssl-devel
    sudo pip install scrapy
    sudo pip install thrift
    yum install fontconfig
    yum install python-lxml
    pip install future
    sudo pip install selenium
    chmod 777 /data


    ###Install python 3
    Mkdir /data
    Cd /data

    wget https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz
    tar -zxvf Python-3.5.1.tgz
    sudo mkdir /usr/local/python3

    sudo Python-3.5.1/configure --prefix=/usr/local/python3
    make
    sudo make install

    sudo mv python python.bak


    cp /usr/local/python3/bin/python3 /usr/bin/

35.=================安装使用Miniconda=================
    https://www.jianshu.com/p/34843d792e38

        wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh

        sh Miniconda2-latest-Linux-x86_64.sh
        输入yes，回车，输入yes，重新登录。

        看到以下内容表示安装成功：

        For this change to become active, you have to open a new terminal.

        Thank you for installing Miniconda2



    https://blog.csdn.net/menc15/article/details/71477949

    conda create --prefix /home/cdenv3.5/  python=3.5

36.=============Django应用的打包和应用的安装和卸载===============
    https://www.cnblogs.com/haoshine/p/5439924.html


    setup.py :

    # -*- coding: UTF-8 -*-
    import os
    from setuptools import setup

    #with open(os.path.join(os.path.dirname(__file__), 'README.rst')) as readme:
    #   README = readme.read()

    # allow setup.py to be run from any path
    os.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))

    setup(
        name='dataMag',
        version='1.0',
        packages=['dataMag'],
        include_package_data=True,
        url='http://192.168.3.16/',
        license='',
        author='MOLE',
        author_email='',
        description='上海晏鼠大数据'
    )

    MANIFEST.in:

    recursive-include dataMag/static *
    recursive-include dataMag/templates *
    recursive-include dataMag/system_user_app *
    recursive-include dataMag/dataMag *
    recursive-include dataMag/dataMag_cat_app *
    recursive-include dataMag/dataMag_industry_app *
    recursive-include dataMag/dataMag_industry_cat_app *
    recursive-include dataMag/dataMag_industrylist_app *
    recursive-include dataMag/dataMag_open_app *
    recursive-include dataMag/dataMag_opencat_app *
    recursive-include dataMag/dataMag_spider_app *
    recursive-include dataMag/dataMag_wordanalysis_app *
    recursive-include dataMag/dataMag_wordlist_app *
    recursive-include dataMag/dataMag_wordsearch_app *
    recursive-include dataMag/dataMag_ysf_app *


    通过python setup.py sdist 构建你的包（从django-polls的内部运行）。这会创建一个dist目录并构建一个新包：django-polls-0.1.tar.gz。







